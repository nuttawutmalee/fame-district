---
AWSTemplateFormatVersion: "2010-09-09"

Description: |
  Static website stack including:
  * S3 bucket for website content
  * Redirect from "www." to base domain
  * Access logs written to logs bucket
  * ACM certificate for SSL
  * CloudFront distributions for website https access
  * Route53 hosted zone with DNS entries
  * CodePipeline (sourced from GitHub)
  * S3 bucket for CodePipeline artifacts

Parameters:
  # Domain: example.com
  DomainName:
    Description: "The base domain name for the website (no 'www'.)"
    Type: String
    MinLength: "4"
    MaxLength: "253"
    AllowedPattern: "[a-z0-9]+[-.a-z0-9]*(\\.[a-z][a-z]+)+"
    ConstraintDescription: "Provide a valid domain name using only lowercase letters, numbers, and dash (-)."

  EnvType:
    Description: Environment type.
    Type: String
    AllowedValues:
      - production
      - development
    Default: development
    ConstraintDescription: Provide specific production or development environtment type.

  DefaultTTL:
    Type: Number
    Description: TTL in seconds.
    Default: "30"

  MinimumTTL:
    Description: Minimum cache lifetime in seconds for the CloudFront distribution.
    Default: "5"
    Type: Number

  SiteTitle:
    Type: String

  SiteUrl:
    Type: String

  PrismicRepo:
    Description: The name of your prismic repository.
    Type: String

  PrismicToken:
    Description: The permanent access token to your prismic repository.
    NoEcho: true
    Type: String

  GitHubOwner:
    Description: The owner of the repository used for the static site.
    Type: String

  GitHubRepo:
    Description: The name of the repository used for the static site.
    Type: String

  GitHubBranch:
    Description: "The branch which will auto deploy the static site (default is master)"
    Type: String
    Default: master

  GitHubToken:
    Description: The OAuth token which gives access to your repository.
    NoEcho: true
    Type: String

  PreExistingSiteBucket:
    Description: Optional name of pre-existing website bucket. Leave empty to have website bucket created and managed by this stack.
    Type: String
    Default: ""

  PreExistingRedirectBucket:
    Description: Optional name of pre-existing redirect bucket. Leave empty to have redirect bucket created and managed by this stack.
    Type: String
    Default: ""

  PreExistingCodePipelineBucket:
    Description: "Optional name of pre-existing CodePipeline artifact bucket. Leave empty to have CodePipeline bucket created and managed by this stack."
    Type: String
    Default: ""

  PreExistingCodeBuildCacheBucket:
    Description: "Optional name of pre-existing CodeBuild caching bucket. Leave empty to have CodeBuild bucket created and managed by this stack."
    Type: String
    Default: ""

  PreExistingHostedZoneDomain:
    Description: Optional domain name for pre-existing Route 53 hosted zone. Leave empty to have hosted zone created and managed by this stack.
    Type: String
    Default: ""

Conditions:
  IsProduction: !Equals
    - !Ref EnvType
    - production
  NeedsNewSiteBucket: !Equals
    - !Ref PreExistingSiteBucket
    - ""
  NeedsNewRedirectBucket: !Equals
    - !Ref PreExistingRedirectBucket
    - ""
  NeedsNewCodePipelineBucket: !Equals
    - !Ref PreExistingCodePipelineBucket
    - ""
  NeedsNewCodeBuildCacheBucket: !Equals
    - !Ref PreExistingCodeBuildCacheBucket
    - ""
  NeedsNewHostedZone: !Equals
    - !Ref PreExistingHostedZoneDomain
    - ""

Resources:
  # Bucket for site content: example.com
  SiteBucket:
    Condition: NeedsNewSiteBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  # Allow public to get object from site bucket
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: SiteBucket
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref SiteBucket
                - "/*"
            Principal: "*"

  # Bucket to redirect to example.com: www.example.com
  RedirectBucket:
    Condition: NeedsNewRedirectBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "www.${DomainName}"
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref DomainName
          Protocol: !If
            - IsProduction
            - https
            - http

  # Bucket for CodePipeline artifact storage: codepipeline.example.com
  CodePipelineBucket:
    Condition: NeedsNewCodePipelineBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "codepipeline.${DomainName}"
      VersioningConfiguration:
        Status: Enabled

  # Bucket for codebuild caching dependencies
  CodeBuildCacheBucket:
    Condition: NeedsNewCodeBuildCacheBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "codebuildcache.${DomainName}"
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref "AWS::StackName"
              - CodeBuildCacheBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled

  # Certificate for HTTPS accesss through CloudFront
  Certificate:
    Condition: IsProduction
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub "www.${DomainName}"

  # CDN serves S3 content for example.com
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Delete
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref DomainName
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Join
              - ""
              - - !Ref DomainName
                - .
                - !FindInMap
                  - RegionMap
                  - !Ref "AWS::Region"
                  - WebsiteEndpoint
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: !Ref DefaultTTL
          MinTTL: !Ref MinimumTTL
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: !If
            - IsProduction
            - redirect-to-https
            - allow-all
        ViewerCertificate: !If
          - IsProduction
          - AcmCertificateArn: !Ref Certificate
            SslSupportMethod: sni-only
          - !Ref "AWS::NoValue"

  # CDN serves S3 content for www.example.com
  RedirectCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Delete
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !If
            - NeedsNewRedirectBucket
            - !Ref RedirectBucket
            - !Ref PreExistingRedirectBucket
        Origins:
          - DomainName: !Join
              - ""
              - - !If
                  - NeedsNewRedirectBucket
                  - !Ref RedirectBucket
                  - !Ref PreExistingRedirectBucket
                - .
                - !FindInMap
                  - RegionMap
                  - !Ref "AWS::Region"
                  - WebsiteEndpoint
            Id: RedirectS3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: RedirectS3Origin
          AllowedMethods:
            - GET
            - HEAD
          DefaultTTL: !Ref DefaultTTL
          MinTTL: !Ref MinimumTTL
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        ViewerCertificate: !If
          - IsProduction
          - AcmCertificateArn: !Ref Certificate
            SslSupportMethod: sni-only
          - !Ref "AWS::NoValue"

  # DNS: example.com, www.example.com
  Route53HostedZone:
    Condition: NeedsNewHostedZone
    Type: AWS::Route53::HostedZone
    DeletionPolicy: Delete
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub "Created by CloudFormation stack: ${AWS::StackName}"

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    DeletionPolicy: Delete
    Properties:
      HostedZoneId: !If
        - NeedsNewHostedZone
        - !Ref Route53HostedZone
        - !Ref "AWS::NoValue"
      HostedZoneName: !If
        - NeedsNewHostedZone
        - !Ref "AWS::NoValue"
        - !Sub "${PreExistingHostedZoneDomain}."
      RecordSets:
        # example.com
        - Name: !Sub "${DomainName}."
          Type: A
          # Resolve to CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
            DNSName: !GetAtt CloudFrontDistribution.DomainName
        # www.example.com
        - Name: !Sub "www.${DomainName}."
          Type: A
          # Resolve to Redirect CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
            DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName

  GatsbyCodeBuildRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - codebuild.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: "codebuild-service"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # CodeBuild: gatsby static artifacts
  GatsbyCodeBuild:
    Type: AWS::CodeBuild::Project
    DependsOn: SiteBucket
    DeletionPolicy: Delete
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Ref CodeBuildCacheBucket
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:10.14.1
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DESTINATION_S3_BUCKET
            Value: !Ref DomainName
          - Name: DISTRIBUTION_ID
            Value: !Ref CloudFrontDistribution
          - Name: REDIRECT_DISTRIBUTION_ID
            Value: !Ref RedirectCloudFrontDistribution
          - Name: SITE_TITLE
            Value: !Ref SiteTitle
          - Name: SITE_URL
            Value: !Ref SiteUrl
          - Name: PRISMIC_REPO
            Value: !Ref PrismicRepo
          - Name: PRISMIC_TOKEN
            Value: !Ref PrismicToken
      Name: !Sub "${AWS::StackName}GatsbyCodeBuild"
      ServiceRole: !Ref GatsbyCodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - aws s3 sync "public/" "s3://$DESTINATION_S3_BUCKET" --delete --acl "public-read"
                - aws s3 cp "s3://$DESTINATION_S3_BUCKET" "s3://$DESTINATION_S3_BUCKET" --metadata-directive REPLACE --exclude "*" --include "*.jpg" --include "*.gif" --include "*.png" --recursive --cache-control max-age=3600
                # Main distribution
                - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
                # Redirect distribution
                - aws cloudfront create-invalidation --distribution-id $REDIRECT_DISTRIBUTION_ID --paths '/*'
          cache:
            paths:
              - "node_modules/**/*"
          artifacts:
            base-directory: public
            files:
              - "**/*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "codepipeline-service"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # CodePipeline: Pass Git contents to AWS Lambda function on Git activity
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DeletionPolicy: Delete
    Properties:
      Name: !Sub "${DomainName}-codepipeline"
      ArtifactStore:
        Type: S3
        Location: !If
          - NeedsNewCodePipelineBucket
          - !Ref CodePipelineBucket
          - !Ref PreExistingCodePipelineBucket
      RestartExecutionOnUpdate: true
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CodePipelineRole}"
      Stages:
        - Name: Source-from-GitHub
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SiteSource
              RunOrder: 1
        - Name: Build-and-Deploy
          Actions:
            - Name: Gatsby-Build
              InputArtifacts:
                - Name: SiteSource
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref GatsbyCodeBuild
              OutputArtifacts:
                - Name: StaticFiles
              RunOrder: 1

Mappings:
  RegionMap:
    ap-northeast-1:
      S3HostedZoneID: Z2M4EHUR26P7ZW
      WebsiteEndpoint: "s3-website-ap-northeast-1.amazonaws.com"
    ap-northeast-2:
      S3HostedZoneID: Z3W03O7B5YMIYP
      WebsiteEndpoint: "s3-website.ap-northeast-2.amazonaws.com"
    ap-northeast-3:
      S3HostedZoneID: Z2YQB5RD63NC85
      WebsiteEndpoint: "s3-website.ap-northeast-3.amazonaws.com"
    ap-south-1:
      S3HostedZoneID: Z11RGJOFQNVJUP
      WebsiteEndpoint: "s3-website.ap-south-1.amazonaws.com"
    ap-southeast-1:
      S3HostedZoneID: Z3O0J2DXBE1FTB
      WebsiteEndpoint: "s3-website-ap-southeast-1.amazonaws.com"
    ap-southeast-2:
      S3HostedZoneID: Z1WCIGYICN2BYD
      WebsiteEndpoint: "s3-website-ap-southeast-2.amazonaws.com"
    cn-northwest-1:
      S3HostedZoneID: NOT_SUPPORTED
      WebsiteEndpoint: "s3-website.cn-northwest-1.amazonaws.com.cn"
    ca-central-1:
      S3HostedZoneID: Z1QDHH18159H29
      WebsiteEndpoint: "s3-website.ca-central-1.amazonaws.com"
    eu-central-1:
      S3HostedZoneID: Z21DNDUVLTQW6Q
      WebsiteEndpoint: "s3-website.eu-central-1.amazonaws.com"
    eu-north-1:
      S3HostedZoneID: Z3BAZG2TWCNX0D
      WebsiteEndpoint: "s3-website.eu-north-1.amazonaws.com"
    eu-west-1:
      S3HostedZoneID: Z1BKCTXD74EZPE
      WebsiteEndpoint: "s3-website-eu-west-1.amazonaws.com"
    eu-west-2:
      S3HostedZoneID: Z3GKZC51ZF0DB4
      WebsiteEndpoint: "s3-website-eu-west-2.amazonaws.com"
    eu-west-3:
      S3HostedZoneID: Z3R1K369G5AVDG
      WebsiteEndpoint: "s3-website-eu-west-3.amazonaws.com"
    sa-east-1:
      S3HostedZoneID: Z7KQH4QJS55SO
      WebsiteEndpoint: "s3-website-sa-east-1.amazonaws.com"
    us-east-1:
      S3HostedZoneID: Z3AQBSTGFYJSTF
      WebsiteEndpoint: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3HostedZoneID: Z2O1EMRO9K5GLX
      WebsiteEndpoint: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      S3HostedZoneID: Z2F56UZL2M1ACD
      WebsiteEndpoint: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3HostedZoneID: Z3BJ6K6RIION7M
      WebsiteEndpoint: "s3-website-us-west-2.amazonaws.com"

Outputs:
  EnvirontmentType:
    Value: !Ref EnvType
  DomainName:
    Description: Domain name
    Value: !Ref DomainName
  RedirectDomainName:
    Description: Redirect hostname
    Value: !If
      - NeedsNewRedirectBucket
      - !Ref RedirectBucket
      - !Ref PreExistingRedirectBucket
  SiteBucket:
    Value: !If
      - NeedsNewSiteBucket
      - !Ref SiteBucket
      - !Ref PreExistingSiteBucket
  RedirectBucket:
    Value: !If
      - NeedsNewRedirectBucket
      - !Ref RedirectBucket
      - !Ref PreExistingSiteBucket
  HostedZoneId:
    Description: Route 53 Hosted Zone id
    Value: !If
      - NeedsNewHostedZone
      - !Ref Route53HostedZone
      - "N/A"
  CloudFrontDomain:
    Description: CloudFront distribution domain name
    Value: !Ref CloudFrontDistribution
  RedirectCloudFrontDomain:
    Description: Redirect CloudFront distribution domain name
    Value: !Ref RedirectCloudFrontDistribution
  CodePipelineArn:
    Description: CodePipeline ARN
    Value: !Ref CodePipeline
  GitRepositoryName:
    Description: Git repository name
    Value: !Ref GitHubRepo

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Website and Git repository
        Parameters:
          - DomainName
          - GitHubOwner
          - GitHubRepo
          - GitHubBranch
          - GitHubToken
      - Label:
          default: CloudFront CDN
        Parameters:
          - MinimumTTL
          - DefaultTTL
      - Label:
          default: "Pre-existing Resources To Use (Leave empty for stack to create and manage"
        Parameters:
          - PreExistingSiteBucket
          - PreExistingRedirectBucket
          - PreExistingHostedZoneDomain
          - PreExistingCodePipelineBucket
          - PreExistingCodeBuildCacheBucket
